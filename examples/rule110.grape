// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
// ;; Written by MSB                               ;;
// ;; Usage: ./grape.py rule110.grape > output.pbm ;;
// ;; This will generate an image file containing  ;;
// ;; an image of a rule110 triangle.              ;;
// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// --- Begin Generic Tools ---

fn iter(fun, arr) do
    for(0, len(arr), fn(i) do
        fun(elem(arr, i))
    end)
end

fn enumerate(fun, arr) do
    for(0, len(arr), fn(i) do
        fun(i, elem(arr, i))
    end)
end

fn repeat(times, fun) do
  for(0, times, fun, [])
end

fn put(arr, i, elm) do
    fun = fn(j, arr_elm) do
        if (i == j) do
            elm
        else
            arr_elm
        end
    end

    enumerate(fun, arr)
end

// --- End Generic Tools ---

// --- Begin Specific Tools ---
fn print_arr(arr) do
    iter(fn(elm) do
        if (elm) do
            write( "1" )
            write( " " )
        else
            write( "0" )
            write( " " )
        end
    end, arr)
    print("")
end
// --- End Specific Tools ---

// --- Begin Calculation Code ---

// Ensure (numbers in print) == len(buffer)
print( "P1 40 40" )
buffer = for(0, 40, fn(i) do
    false
end)

buffer = put(buffer, 39, true)

accumulate(0, len(buffer), buffer, fn(tick, buffer) do
    print_arr( buffer )
    tmp_buffer = for(0, len(buffer), fn(i) do
        if (i == 0) do
            elem(buffer, 0) or elem(buffer, 1)
        else if (i == len(buffer)-1) do
            elem(buffer, len(buffer)-1)
        else
            x = elem(buffer, i-1)
            y = elem(buffer, i)
            z = elem(buffer, i+1)

            if (x) do
                if (y) do
                    if (z) do
                        false
                    else
                        true
                    end
                else
                    if (z) do
                        true
                    else
                        false
                    end
                end
            else
                if (y) do
                    if (z) do
                        true
                    else
                        true
                    end
                else
                    if (z) do
                        true
                    else
                        false
                    end
                end
            end
        end
        end
    end)

    tmp_buffer
end)

// --- End Calculation Code ---
